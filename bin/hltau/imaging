#!/usr/bin/env python


# standard library
import os
import time
from pathlib import Path


# dependencies
from priism.alma import AlmaSparseModelingImager


# constants
DATA = Path(__file__).resolve().parents[2] / "data" / "hltau"
LOG = Path(__file__).resolve().parents[2] / "log" / "hltau"
OMP_NUM_THREADS = os.environ.get("OMP_NUM_THREADS")
PRIISM_VERSION = os.environ.get("PRIISM_VERSION")


def main() -> None:
    # create an imager and read the MS (out of benchmark)
    imager = AlmaSparseModelingImager(solver="mfista_nufft")
    imager.selectdata(
        vis=str(DATA / "data.ms"),
        spw="0",
        intent="OBSERVE_TARGET#ON_SOURCE",
        datacolumn="data",
    )
    imager.defineimage(
        imsize=[1600, 1600],
        cell=["0.005arcsec", "0.005arcsec"],
        phasecenter="0",
        nchan=1,
        start=0,
        width=4,
    )
    imager.readvis()

    # do imaging
    t_start = time.time()
    imager.solve(
        l1=1e9,
        ltsv=1e9,
        maxiter=100,
    )
    t_end = time.time()

    # output results
    log = "benchmark.log"
    LOG.mkdir(parents=True, exist_ok=True)

    if not (LOG / log).exists():
        with open(LOG / log, "w") as f:
            f.write("PRIISM version,Number of threads,Elapsed time (s)\n")

    with open(LOG / log, "a") as f:
        f.write(f"{PRIISM_VERSION},{OMP_NUM_THREADS},{t_end-t_start:.2f}\n")

    imager.exportimage(str(LOG / f"{PRIISM_VERSION}-{OMP_NUM_THREADS}.fits"))


if __name__ == "__main__":
    main()
